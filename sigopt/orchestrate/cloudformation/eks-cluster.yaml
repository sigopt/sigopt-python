# original https://raw.githubusercontent.com/awslabs/amazon-eks-ami/0ccb71878f92f808dcc80d38e9cf8a296bb72b33/amazon-eks-nodegroup.yaml

AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon EKS - Stack for SigOpt clusters

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Stack template URLs
        Parameters:
          - NodeGroupStackTemplateURL
          - NodeSecurityStackTemplateURL
          - VPCStackTemplateURL
      - Label:
          default: User info
        Parameters:
          - UserArn
      - Label:
          default: VPC configuration
        Parameters:
          - AZ01
          - AZ02
          - VPCBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
          - KubernetesVersion
      - Label:
          default: Worker Node Configuration
        Parameters:
          - CPUNodeAutoScalingGroupDesiredCapacity
          - CPUNodeAutoScalingGroupMaxSize
          - CPUNodeAutoScalingGroupMinSize
          - CPUNodeInstanceType
          - CPUNodeVolumeSize
          - GPUNodeAutoScalingGroupDesiredCapacity
          - GPUNodeAutoScalingGroupMaxSize
          - GPUNodeAutoScalingGroupMinSize
          - GPUNodeInstanceType
          - GPUNodeVolumeSize
          - SSHKeyName
          - SystemNodeAutoScalingGroupMaxSize
          - SystemNodeInstanceType
          - SystemNodeVolumeSize

Parameters:
  NodeGroupStackTemplateURL:
    Type: String
    Description: The URL of the node group stack template.

  NodeSecurityStackTemplateURL:
    Type: String
    Description: The URL of the node security stack template.

  VPCStackTemplateURL:
    Type: String
    Description: The URL of the VPC stack template.

  UserArn:
    Type: String
    Description: The ARN of the default user accessing the cluster.

  VPCBlock:
    Type: String
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  AZ01:
    Type: String
    Description: The first availability zone to use.

  AZ02:
    Type: String
    Description: The second availability zone to use.

  PublicSubnet01Block:
    Type: String
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Description: CidrBlock for private subnet 02 within the VPC

  ClusterName:
    Type: String
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

  KubernetesVersion:
    Type: String
    Description: The Kubernetes version, consisting of the major and minor version number.

  SSHKeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances

  SystemNodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  CPUNodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Description: Desired capacity of Node Group ASG.

  CPUNodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  CPUNodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.

  GPUNodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Description: Desired capacity of Node Group ASG.

  GPUNodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  GPUNodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.

  SystemNodeInstanceType:
    Type: String
    Description: EC2 instance type for the system node instances

  CPUNodeInstanceType:
    Type: String
    Description: EC2 instance type for the CPU node instances

  GPUNodeInstanceType:
    Type: String
    Description: EC2 instance type for the GPU node instances

  SystemNodeVolumeSize:
    Type: Number
    Default: 8
    Description: Node volume size for system nodes

  CPUNodeVolumeSize:
    Type: Number
    Default: 100
    Description: Node volume size for CPU nodes

  GPUNodeVolumeSize:
    Type: Number
    Default: 100
    Description: Node volume size for GPU nodes

Conditions:
  ShouldCreateCPUNodes: !Not
    - !Equals
      - !Ref CPUNodeAutoScalingGroupMaxSize
      - "0"

  ShouldCreateGPUNodes: !Not
    - !Equals
      - !Ref GPUNodeAutoScalingGroupMaxSize
      - "0"

Resources:
  ClusterVPC:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Ref VPCStackTemplateURL
      Parameters:
        AZ01: !Ref AZ01
        AZ02: !Ref AZ02
        VPCBlock: !Ref VPCBlock
        PublicSubnet01Block: !Ref PublicSubnet01Block
        PublicSubnet02Block: !Ref PublicSubnet02Block
        PrivateSubnet01Block: !Ref PrivateSubnet01Block
        PrivateSubnet02Block: !Ref PrivateSubnet02Block

  ClusterManagementRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Path: /

  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ClusterVPC
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !GetAtt ClusterVPC.Outputs.VpcId

  Cluster:
    Type: "AWS::EKS::Cluster"
    DependsOn: ClusterVPC
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt ClusterManagementRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterControlPlaneSecurityGroup
        SubnetIds:
          - !GetAtt ClusterVPC.Outputs.AZ1PublicSubnet
          - !GetAtt ClusterVPC.Outputs.AZ2PublicSubnet
          - !GetAtt ClusterVPC.Outputs.AZ1PrivateSubnet
          - !GetAtt ClusterVPC.Outputs.AZ2PrivateSubnet

  ClusterAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ClusterName}-k8s-access-role"
      Description: !Sub "Access the kubernetes cluster: ${ClusterName}, created by SigOpt"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref UserArn
            Action: "sts:AssumeRole"
      Path: /

  NodeSecurity:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - ClusterVPC
      - ClusterControlPlaneSecurityGroup
    Properties:
      TemplateURL: !Ref NodeSecurityStackTemplateURL
      Parameters:
        ClusterName: !Ref ClusterName
        ClusterControlPlaneSecurityGroup: !Ref ClusterControlPlaneSecurityGroup
        VpcId: !GetAtt ClusterVPC.Outputs.VpcId

  SystemNodeGroup:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - ClusterVPC
      - NodeSecurity
    Properties:
      TemplateURL: !Ref NodeGroupStackTemplateURL
      Parameters:
        ClusterName: !Ref ClusterName
        NodeGroupName: system-node-group
        NodeGroupType: system
        NodeSecurityGroup: !GetAtt NodeSecurity.Outputs.NodeSecurityGroup
        NodeAutoScalingGroupMinSize: 1
        NodeAutoScalingGroupDesiredCapacity: 1
        NodeAutoScalingGroupMaxSize: !Ref SystemNodeAutoScalingGroupMaxSize
        NodeInstanceProfileArn: !GetAtt NodeSecurity.Outputs.NodeInstanceProfileArn
        NodeInstanceType: !Ref SystemNodeInstanceType
        NodeImageIdSSMParam: !Sub "/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2/recommended/image_id"
        NodeVolumeSize: !Ref SystemNodeVolumeSize
        KeyName: !Ref SSHKeyName
        VpcId: !GetAtt ClusterVPC.Outputs.VpcId
        Subnets: !GetAtt ClusterVPC.Outputs.AZ1PrivateSubnet

  CPUNodeGroup:
    Condition: ShouldCreateCPUNodes
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ClusterVPC
    Properties:
      TemplateURL: !Ref NodeGroupStackTemplateURL
      Parameters:
        ClusterName: !Ref ClusterName
        NodeGroupName: cpu-node-group
        NodeGroupType: cpu
        NodeSecurityGroup: !GetAtt NodeSecurity.Outputs.NodeSecurityGroup
        NodeAutoScalingGroupMinSize: !Ref CPUNodeAutoScalingGroupMinSize
        NodeAutoScalingGroupDesiredCapacity: !Ref CPUNodeAutoScalingGroupDesiredCapacity
        NodeAutoScalingGroupMaxSize: !Ref CPUNodeAutoScalingGroupMaxSize
        NodeInstanceProfileArn: !GetAtt NodeSecurity.Outputs.NodeInstanceProfileArn
        NodeInstanceType: !Ref CPUNodeInstanceType
        NodeImageIdSSMParam: !Sub "/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2/recommended/image_id"
        NodeVolumeSize: !Ref CPUNodeVolumeSize
        KeyName: !Ref SSHKeyName
        VpcId: !GetAtt ClusterVPC.Outputs.VpcId
        Subnets: !Sub
          - "${AZ1PrivateSubnet},${AZ2PrivateSubnet}"
          - AZ1PrivateSubnet: !GetAtt ClusterVPC.Outputs.AZ1PrivateSubnet
            AZ2PrivateSubnet: !GetAtt ClusterVPC.Outputs.AZ2PrivateSubnet

  GPUNodeGroup:
    Condition: ShouldCreateGPUNodes
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ClusterVPC
    Properties:
      TemplateURL: !Ref NodeGroupStackTemplateURL
      Parameters:
        ClusterName: !Ref ClusterName
        NodeGroupName: gpu-node-group
        NodeGroupType: gpu
        NodeSecurityGroup: !GetAtt NodeSecurity.Outputs.NodeSecurityGroup
        NodeAutoScalingGroupMinSize: !Ref GPUNodeAutoScalingGroupMinSize
        NodeAutoScalingGroupDesiredCapacity: !Ref GPUNodeAutoScalingGroupDesiredCapacity
        NodeAutoScalingGroupMaxSize: !Ref GPUNodeAutoScalingGroupMaxSize
        NodeInstanceProfileArn: !GetAtt NodeSecurity.Outputs.NodeInstanceProfileArn
        NodeInstanceType: !Ref GPUNodeInstanceType
        NodeImageIdSSMParam: !Sub "/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2-gpu/recommended/image_id"
        NodeVolumeSize: !Ref GPUNodeVolumeSize
        KeyName: !Ref SSHKeyName
        VpcId: !GetAtt ClusterVPC.Outputs.VpcId
        Subnets: !Sub
          - "${AZ1PrivateSubnet},${AZ2PrivateSubnet}"
          - AZ1PrivateSubnet: !GetAtt ClusterVPC.Outputs.AZ1PrivateSubnet
            AZ2PrivateSubnet: !GetAtt ClusterVPC.Outputs.AZ2PrivateSubnet

Outputs:
  NodeInstanceRoleArn:
    Description: The ARN of the node instance role.
    Value: !GetAtt NodeSecurity.Outputs.NodeInstanceRoleArn

  ClusterAccessRoleArn:
    Description: The ARN of the cluster access role.
    Value: !GetAtt ClusterAccessRole.Arn

  ClusterAccessRoleName:
    Description: The name of the cluster access role.
    Value: !Ref ClusterAccessRole
